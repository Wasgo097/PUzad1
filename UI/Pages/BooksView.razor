@page "/books"
@using RepositoryPattern
@using Model.DTO
@inject LibraryRepository library
<button @onclick="()=>SwitchTab()">
    @if (edit)
    {
        <span>Podgląd</span>
    }
    else
    {
        <span>Dodawanie</span>
    }
</button>
@if (edit && authoredit == false)
{
    <ChangesInBook originalModel="selectedobj" />
}
else if (edit && authoredit == true)
{
    <AddAuthorToBook originalModel="selectedobj" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>ReleaseDate</th>
                <th>AvarageRate</th>
                <th>RateCount</th>
                <th>Authors</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.ReleaseDate.ToString()</td>
                    <td>@book.AvarageRate</td>
                    <td>@book.RatesCount</td>
                    <td> @GetAuthors(book);</td>
                    <td>
                        @for (int i = 1; i <= 5; i++)
                        {
                            int x = i;
                            <button @onclick="() => OnBookRates(book,x)"><span class="oi oi-star"></span></button>
                        }
                    </td>
                    <td>
                        <button @onclick="()=>OnBookDelete(book)"><span class="oi oi-trash"></span></button>
                    </td>
                    <td>
                        <button @onclick="()=>OnEdit(book)">Edycja</button>
                    </td>
                    <td>
                        <button @onclick="()=>OnAuthorsEdit(book)">+</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    bool edit = false;
    bool authoredit = false;
    private BookDTO[] books;
    BookDTO selectedobj = null;
    protected override void OnInitialized()
    {
        books = library.GetBooks(new PaginationDTO(0, 100)).ToArray();
    }
    string GetAuthors(BookDTO obj)
    {
        var list = obj.Authors.Select(x => x.FirstName + " " + x.SecondName);
        return string.Join(", ", list);
    }
    protected void OnBookRates(BookDTO obj, int rate)
    {
        Console.WriteLine(obj.Title + " " + obj.ReleaseDate + " oceniona na " + rate);
        library.AddRateToBook(rate, obj.Id);
        selectedobj = null;
    }
    protected void OnBookDelete(BookDTO obj)
    {
        Console.WriteLine(obj.Title + " " + obj.ReleaseDate + " usunieta");
        library.DeleteBook(obj.Id);
        selectedobj = null;
    }
    protected void OnEdit(BookDTO obj)
    {
        Console.WriteLine(obj.Title + " " + obj.ReleaseDate + " edycja");
        selectedobj = obj;
        edit = !edit;
    }
    protected void OnAuthorsEdit(BookDTO obj)
    {
        Console.WriteLine(obj.Title + " " + obj.ReleaseDate + " edycja");
        selectedobj = obj;
        edit = true;
        authoredit = true;
    }
    void SwitchTab()
    {
        edit = !edit;
        selectedobj = null;
        authoredit = false;
    }
}
