@page "/authors"
@using RepositoryPattern
@using Model.DTO
@inject LibraryRepository library
<button @onclick="()=>SwitchTab()">
    @if (edit)
    {
        <span>Podgląd</span>
    }
    else
    {
        <span>Dodawanie</span>
    }
</button>
@if (edit && booksedit == false)
{
    <ChangesInAuthor originalModel="selectedobj" />
}
else if (edit && booksedit == true)
{
    <AddBookToAurhor originalModel="selectedobj" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>FirstName</th>
                <th>SecondName</th>
                <th>AvarageRate</th>
                <th>RateCount</th>
                <th>CV</th>
                <th>Books</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in authors)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.SecondName</td>
                    <td>@author.AvarageRate</td>
                    <td>@author.RatesCount</td>
                    <td>@author.CV</td>
                    <td>@GetBooks(author)</td>
                    <td>
                        @for (int i = 1; i <= 5; i++)
                        {
                            int x = i;
                            <button @onclick="() => OnAuthorRates(author,x)"><span class="oi oi-star"></span></button>
                        }
                    </td>
                    <td>
                        <button @onclick="()=>OnAuthorDelete(author)"><span class="oi oi-trash"></span></button>
                    </td>
                    <td>
                        <button @onclick="()=>OnEdit(author)">Edycja</button>
                    </td>
                    <td>
                        <button @onclick="()=>OnBooksEdit(author)">+</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    bool edit = false;
    bool booksedit = false;
    private AuthorDTO[] authors;
    AuthorDTO selectedobj = null;
    protected override void OnInitialized()
    {
        authors = library.GetAuthors(new PaginationDTO(0, 100)).ToArray();
    }
    protected void OnAuthorRates(AuthorDTO obj, int rate)
    {
        Console.WriteLine(obj.FirstName + " " + obj.SecondName + " oceniony na " + rate);
        library.AddRateToAuthor(rate, obj.Id);
    }
    protected string GetBooks(AuthorDTO obj)
    {
        if (obj.Books.Count > 3)
        {
            var list = obj.Books.Select(x => x.Title).Take(3);
            return string.Join(", ", list) + "... +" + Convert.ToString(obj.Books.Count - 3);
        }
        else
        {
            var list = obj.Books.Select(x => x.Title);
            return string.Join(", ", list);
        }
    }
    protected void OnAuthorDelete(AuthorDTO obj)
    {
        Console.WriteLine(obj.FirstName + " " + obj.SecondName + " usunieta");
        library.DeleteAuthor(obj.Id);
    }
    protected void OnEdit(AuthorDTO obj)
    {
        Console.WriteLine(obj.FirstName + " " + obj.SecondName + " edycja");
        selectedobj = obj;
        edit = true;
    }
    protected void OnBooksEdit(AuthorDTO obj)
    {
        Console.WriteLine(obj.FirstName + " " + obj.SecondName + " edycja");
        selectedobj = obj;
        edit = true;
        booksedit = true;
    }
    protected void SwitchTab()
    {
        edit = !edit;
        selectedobj = null;
        booksedit = false;
    }
}
